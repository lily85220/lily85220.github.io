import{fg as w,fh as y,fi as I,fj as V,a3 as v,bz as H,ap as p,fk as c,ak as T,ac as o,ad as g,af as q}from"./index-cb639cc1.js";import"./Rasterizer-fef7f176.js";import"./Container-0639ee3d.js";import"./BufferPool-dc72dc51.js";import"./enums-b1d611e3.js";import"./WGLContainer-22e7c87b.js";import"./color-916b4f87.js";import"./MaterialKey-a958dec2.js";import"./utils-f978585c.js";import"./number-b10bd8f5.js";import"./StyleDefinition-7d58136b.js";import"./MagnifierPrograms-046c9108.js";import{a as U}from"./GraphicsView2D-28d2d544.js";import"./AttributeStoreView-0d158480.js";import{t as Q,o as f,n as d}from"./imageUtils-05b52030.js";import{f as b}from"./LayerView2D-52985332.js";import{n as S}from"./HighlightGraphicContainer-8c28ab06.js";import{u as C}from"./LayerView-fee1e4f7.js";import{i as k}from"./RefreshableLayerView-7dc52eae.js";import{P as F,S as P}from"./MapServiceLayerViewHelper-34527599.js";import{a as z}from"./drapedUtils-8847b824.js";import"./_commonjsHelpers-2f3e7994.js";import"./cimAnalyzer-263bafa1.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./enums-4b2a86a0.js";import"./utils-35d9b505.js";import"./alignmentUtils-ae955d28.js";import"./definitions-19bfb61c.js";import"./Rect-ea14f53a.js";import"./rasterizingUtils-da353a58.js";import"./WGLBrushVTLSymbol-69c603f9.js";import"./GeometryUtils-dd03fc25.js";import"./ShaderCompiler-77d0dcb6.js";import"./ProgramTemplate-3f37b110.js";import"./heatmapTextureUtils-056b357c.js";import"./imageutils-6de27084.js";import"./Matcher-f36ffa66.js";import"./visualVariablesUtils-e8f7cd46.js";import"./visualVariablesUtils-6a784d48.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-95dd8b1b.js";import"./ExpandedCIM-03d4fc54.js";import"./CircularArray-7b2394fa.js";import"./ComputedAttributeStorage-0b11aa21.js";import"./arcadeTimeUtils-9099ffb4.js";import"./centroid-d352bf1e.js";import"./normalizeUtilsSync-360fb6bc.js";import"./schemaUtils-5ed910d9.js";import"./util-5c979b56.js";import"./GraphicsView-a2abd211.js";import"./BitmapTileContainer-816dc43b.js";import"./Bitmap-99ee7f2b.js";import"./TileContainer-c1add888.js";import"./BaseGraphicContainer-2764499a.js";import"./FeatureContainer-b394ad2c.js";import"./popupUtils-fdf02f9f.js";const G=[0,0];let h=class extends k(Q(b(C))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,i)=>this.fetchTile(e,i)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),F(this,this.layer)){const e=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new S(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new P({createFetchPopupFeaturesQueryGeometry:(i,r)=>z(i,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(i,r)=>{e.graphicUpdateHandler({graphic:i,property:r})},layerView:this,updatingHandles:this.updatingHandles})}this.requestUpdate(),this.addAttachHandles(v(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):{remove(){}}}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return H((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(t=>this._enqueueTileFetch(t)))}isUpdating(){var t;return((t=this._fetchQueue)==null?void 0:t.updating)??!1}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(G,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(e),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:n=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(s){if(!p(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(n<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const m=new c(u),_=await this.fetchTile(m,{...e,resamplingLevel:n+1});return d(this._tileInfoView,_,m,t)}}throw s}const a=new c(0,0,0,0);let l;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,a,{signal:r}),a.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);l=await this._fetchImage(a,r)}catch(s){if(p(s))throw s;l=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,l,a,t):l}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){p(e)||T.getLogger(this.declaredClass).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};o([g()],h.prototype,"_fetchQueue",void 0),o([g()],h.prototype,"resampling",null),h=o([q("esri.views.2d.layers.TileLayerView2D")],h);const Lt=h;export{Lt as default};
