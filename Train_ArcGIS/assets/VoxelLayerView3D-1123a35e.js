import{a0 as S,W as c,g as f,bz as x,r as t,a3 as l,a4 as T,a1 as E,c6 as A,cm as L,aN as I,ia as M,cJ as D,bC as P,k as F,ak as V,ac as b,ad as _,af as C,n as v}from"./index-cb639cc1.js";import{n as $}from"./LayerView3D-2f960f05.js";import{c as R}from"./PopupSceneLayerView-9108dd79.js";import{u as U}from"./LayerView-fee1e4f7.js";import"./popupUtils-fdf02f9f.js";var r;(function(e){e[e.API=1]="API",e[e.VerboseAPI=2]="VerboseAPI",e[e.Error=3]="Error"})(r||(r={}));const h=v(),w=v();let u=class extends R($(U)){constructor(){super(...arguments),this._suspendedHandle=null,this._usedMemory=0,this._futureMemory=0,this.type="voxel-3d",this.slicePlaneEnabled=!1,this._wasmLayerId=-1,this._handles=new S,this._dbgFlags=new Set}get baseUrl(){var e;return((e=this.layer.parsedUrl)==null?void 0:e.path)??""}get wasmLayerId(){return this._wasmLayerId}initialize(){var m;if(this._dbgFlags.add(r.Error),this.view.viewingMode!=="local")throw new c("voxel:unsupported-viewingMode","Voxel layers support local viewingMode only.",{});if(this.view._stage.renderView.renderingContext.type!==f.WEBGL2)throw new c("voxel:unsupported-context","Voxel layers are supported in WebGL2 rendering contexts only.",{});if(!((m=this.view._stage.renderView.renderingContext.capabilities.colorBufferFloat)!=null&&m.textureFloat))throw new c("voxel:missing-color-buffer-float","Voxel layers require the WebGL2 extension EXT_color_buffer_float",{});const e=this.layer.spatialReference;if(!x(e,this.view.spatialReference))throw new c("layerview:spatial-reference-incompatible","The spatial reference of this scene layer is incompatible with the spatial reference of the view",{});const s=this.layer.currentVariableId,a=this.layer.getVolume(s),o=this.layer.getVariable(s);if(t(a)&&t(o)){const d=a.dimensions[0],i=a.dimensions[1],y=a.zDimension;if(y>1){const W=a.dimensions[y],g=d.size*i.size*W.size;let p=1;switch(o.renderingFormat.type){case"Int16":case"UInt16":p=2;break;case"Int32":case"UInt32":case"Float32":p=4}this._futureMemory=p*g}}const n=this.view.addVoxelLayerViewToWasm(this).then(d=>{this._wasmLayerId=d,this._suspendedHandle=l(()=>this.suspended,i=>{const y=this.view.voxelWasm;t(y)&&y.setEnabled(this,!i)},T),this._handles.add([l(()=>this.layer.renderMode,i=>this._pushRenderModeToWasm(i)),l(()=>this.layer.currentVariableId,i=>this._pushCurrentVariableIdToWasm(i)),l(()=>this.layer.getSections(),i=>this._pushSectionsToWasm(i)),l(()=>this.layer.getVariableStyles(),i=>this._pushVariableStylesToWasm(i)),l(()=>this.layer.getVolumeStyles(),i=>this._pushVolumeStylesToWasm(i)),l(()=>this.layer.enableDynamicSections,i=>this._pushEnableDynamicSectionsToWasm(i)),l(()=>this.layer.enableIsosurfaces,i=>this._pushEnableIsosurfacesToWasm(i)),l(()=>this.layer.enableSections,i=>this._pushEnableSectionsToWasm(i)),l(()=>this.layer.enableSlices,i=>this._pushEnableSlicesToWasm(i)),l(()=>this.slicePlaneEnabled,i=>this._pushAnalysisSliceToWasm(i,this.view.slicePlane)),l(()=>this.view.slicePlane,i=>this._pushAnalysisSliceToWasm(this.slicePlaneEnabled,i))])}).catch(d=>{if(this.view.removeVoxelLayerViewFromWasm(this),this._wasmLayerId=-1,d===-1)throw new c("voxel:addLayer-failure","The voxel layer description was invalid.",{});if(d===-2)throw new c("voxel:addLayer-failure","The voxel layer web assembly module failed to download.",{})});this.addResolvingPromise(n)}destroy(){this.view.removeVoxelLayerViewFromWasm(this),this._suspendedHandle&&(this._suspendedHandle.remove(),this._suspendedHandle=null),this._handles=E(this._handles)}isUpdating(){const e=this.view.voxelWasm;return!(this._wasmLayerId<0||!t(e))&&e.isUpdating(this._wasmLayerId)}updatingFlagChanged(){this.notifyChange("updating")}getUsedMemory(){return this._usedMemory}getUnloadedMemory(){return this._futureMemory}ignoresMemoryFactor(){return!0}get performanceInfo(){return{nodes:0,displayedNumberOfFeatures:0,maximumNumberOfFeatures:0,totalNumberOfFeatures:0,core:null}}whenGraphicBounds(e,s){const a=e.attributes["Voxel.WorldPosition"];if(a){const o=A(),n=JSON.parse(a);if(L(n,this.view.renderSpatialReference,w,this.view.spatialReference||I.WGS84))return M(o,w),Promise.resolve({boundingBox:o,screenSpaceObjects:[]})}return Promise.reject()}setUsedMemory(e){this._usedMemory=e,this._futureMemory=0}captureFrustum(){const e=this.view.voxelWasm;t(e)&&e.captureFrustum()}toggleFullVolumeExtentDraw(){const e=this.view.voxelWasm;t(e)&&e.toggleFullVolumeExtentDraw(this)}getLayerTimes(){let e=[];const s=this.view.voxelWasm;return t(s)&&(e=s.getLayerTimes(this)),e}getCurrentLayerTimeIndex(){let e=0;const s=this.view.voxelWasm;return t(s)&&(e=s.getCurrentLayerTimeIndex(this)),e}_pushRenderModeToWasm(e){const s=this.view.voxelWasm;this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushRenderModeToWasm() called, "+(t(s)?"have WASM":"don't have WASM!!!")),t(s)&&s.setRenderMode(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushRenderModeToWasm() failed!")}_pushSectionsToWasm(e){const s=this.view.voxelWasm;this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushSectionsToWasm() called, "+(t(s)?"have WASM":"don't have WASM!!!")),t(s)&&s.setStaticSections(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushSectionsToWasm() failed!")}_pushCurrentVariableIdToWasm(e){const s=this.view.voxelWasm;this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushCurrentVariableIdToWasm() called!, "+(t(s)?"have WASM":"don't have WASM!!!")),t(s)&&s.setCurrentVariable(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushCurrentVariableIdToWasm() failed!")}_pushVariableStylesToWasm(e){const s=this.view.voxelWasm;this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushVariableStylesToWasm() called, "+(t(s)?"have WASM":"don't have WASM!!!"));let a=!1;t(s)&&(a=s.setVariableStyles(this,e),a||this._dbg(r.Error,"VoxelLayerView3D._pushVariableStylesToWasm() failed!"))}_accountForEnableSlices(e,s){const a=t(s)?s:this.layer.enableSlices;for(let o=0;o<e.length;++o){const n=e[o];for(const m of n.slices)m.enabled=m.enabled&&a}}_pushVolumeStylesToWasm(e){const s=this.view.voxelWasm;this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushVolumeStylesToWasm() called, "+(t(s)?"have WASM":"don't have WASM!!!"));let a=!1;t(s)&&(this._accountForEnableSlices(e,null),a=s.setVolumeStyles(this,e),a||this._dbg(r.Error,"VoxelLayerView3D._pushVolumeStylesToWasm() failed!"))}_pushAnalysisSliceToWasm(e,s){const a=this.view.voxelWasm;this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushAnalysisSliceToWasm() called, "+(t(a)?"have WASM":"don't have WASM!!!"));let o=!1;if(t(a)){if(t(s)){const n=s.origin;D(h,s.basis1,s.basis2),P(h,h),o=a.setAnalysisSlice(this,e,n,h)}else F(h,0,0,1),o=a.setAnalysisSlice(this,!1,h,h);o||this._dbg(r.Error,"VoxelLayerView3D._pushAnalysisSliceToWasm() failed!")}}_pushEnableDynamicSectionsToWasm(e){const s=this.view.voxelWasm;this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() called, "+(t(s)?"have WASM":"don't have WASM!!!"));let a=!1;t(s)&&(a=s.setEnableDynamicSections(this,e),a||this._dbg(r.Error,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() failed!"))}_pushEnableSlicesToWasm(e){const s=this.view.voxelWasm;this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableSlicesToWasm() called, "+(t(s)?"have WASM":"don't have WASM!!!"));let a=!1;if(t(s)){const o=this.layer.getVolumeStyles();this._accountForEnableSlices(o,e),a=s.setVolumeStyles(this,o),a||this._dbg(r.Error,"VoxelLayerView3D._pushEnableSlicesToWasm() failed!")}}_pushEnableIsosurfacesToWasm(e){const s=this.view.voxelWasm;this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() called, "+(t(s)?"have WASM":"don't have WASM!!!"));let a=!1;t(s)&&(a=s.setEnableIsosurfaces(this,e),a||this._dbg(r.Error,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() failed!"))}_pushEnableSectionsToWasm(e){const s=this.view.voxelWasm;this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableSectionsToWasm() called, "+(t(s)?"have WASM":"don't have WASM!!!"));let a=!1;t(s)&&(a=s.setEnableSections(this,e),a||this._dbg(r.Error,"VoxelLayerView3D._pushEnableSectionsToWasm() failed!"))}async whenGraphicAttributes(e,s){return e}_dbg(e,s){this._dbgFlags.has(e)&&(e===r.Error?V.getLogger(this.declaredClass).error(s):V.getLogger(this.declaredClass).warn(s))}};b([_()],u.prototype,"layer",void 0),b([_()],u.prototype,"baseUrl",null),b([_({type:Boolean})],u.prototype,"slicePlaneEnabled",void 0),u=b([C("esri.views.3d.layers.VoxelLayerView3D")],u);const O=u;export{O as default};
