import{sF as p,sG as g,pC as y,sH as w,sI as I,bh as f,v as h,ai as b}from"./index-cb639cc1.js";class v{constructor(){this.code=null,this.description=null}}class _{constructor(t){this.error=new v,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function d(e){return new _(e)}class q{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function G(e){return new q(e)}const l=new Set;function V(e,t,i,m=!1,u){l.clear();for(const s in i){const n=e.get(s);if(!n)continue;const a=i[s],r=P(n,a);if(r!==a&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:n,originalValue:a,sanitizedValue:r}}),l.add(n.name),n&&(m||n.editable)){const c=p(n,r);if(c)return d(g(c,n,r));t[n.name]=r}}for(const s of(e==null?void 0:e.requiredFields)??[])if(!l.has(s.name))return d(`missing required field "${s.name}"`);return null}function P(e,t){let i=t;return typeof t=="string"&&y(e)?i=parseFloat(t):t!=null&&w(e)&&typeof t!="string"&&(i=String(t)),I(i)}let o;function j(e,t){if(!e||!f(t))return e;if("rings"in e||"paths"in e){if(h(o))throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function E(){return h(o)&&(o=await b(()=>import("./geometryEngineJSON-e7570b2b.js"),["assets/geometryEngineJSON-e7570b2b.js","assets/geometryEngineBase-e1a33b0a.js","assets/geometryEngineJSON-0cf11512.js","assets/index-cb639cc1.js","assets/index-ec7d25bd.css"])),o}async function S(e,t){!f(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await E()}export{d as a,G as f,j as g,V as m,S as w};
