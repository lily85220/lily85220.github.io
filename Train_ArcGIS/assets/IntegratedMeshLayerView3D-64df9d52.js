import{q7 as n,a4 as p,aA as m,v as l,ac as i,ad as e,nL as d,af as h}from"./index-cb639cc1.js";import{v as u}from"./I3SMeshView3D-c0eb2a0a.js";import{n as c}from"./LayerView3D-2f960f05.js";import{u as g}from"./LayerView-fee1e4f7.js";import"./I3SOverrides-39895cea.js";import"./I3SNode-5e16d2d0.js";import"./I3SUtil-6c216874.js";import"./I3SBinaryReader-90fedac1.js";import"./RenderTexture-0f2142b8.js";import"./FeatureLayerView3D-d8fe2f2f.js";import"./FeatureLayerViewBase3D-467fa76d.js";import"./FeatureLikeLayerView3D-1af64c96.js";import"./dehydratedFeatureComparison-3c65c83d.js";import"./queryForSymbologySnapping-28f1961f.js";import"./hash-0ddfbf4b.js";import"./Graphics3DObjectStates-66f7f08e.js";import"./optimizedFeatureQueryEngineAdapter-c88d667e.js";import"./centroid-d352bf1e.js";import"./PooledRBush-66deaec2.js";import"./QueryEngine-11c9095b.js";import"./timeSupport-5710ecff.js";import"./FeatureStore-d9578d0d.js";import"./BoundsStore-ac96c241.js";import"./heatmapTextureUtils-056b357c.js";import"./projectExtentUtils-f23a1505.js";import"./EventedSet-5497911d.js";import"./FeatureLayerView-92821e96.js";import"./popupUtils-fdf02f9f.js";import"./RefreshableLayerView-7dc52eae.js";import"./SceneModification-cb872ed3.js";import"./persistable-f9157ed8.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./resourceExtension-51a6629e.js";import"./SceneLayerWorker-6944e21b.js";const y=.2;let r=class extends u(c(g)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this.drapeTargetType=n.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var t;return((t=this._controller)==null?void 0:t.updatingProgress)??0}get lodFactor(){var t,o,a,s;return((s=(a=(o=(t=this.view)==null?void 0:t.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?y:1}get layerPopupEnabled(){return!1}initialize(){this.updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){const t=new m;return t.layer=this.layer,t.sourceLayer=this.layer,t}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.handles.remove("modifications"),l(this.layer.modifications))return void(this._modifications=[]);const t=this.layer.modifications;this.handles.add(this.updatingHandles.addOnCollectionChange(()=>t,()=>this._modifications=t.toArray(),p),"modifications")}};i([e()],r.prototype,"layer",void 0),i([e()],r.prototype,"i3slayer",null),i([e(d)],r.prototype,"updatingProgress",void 0),i([e()],r.prototype,"updatingProgressValue",null),i([e()],r.prototype,"lodFactor",null),i([e({readOnly:!0})],r.prototype,"progressiveLoadFactor",null),r=i([h("esri.views.3d.layers.SceneLayerView3D")],r);const X=r;export{X as default};
