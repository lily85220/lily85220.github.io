import{rl as S,b6 as w,eS as _,a8 as T,e2 as m,ac as i,ad as r,af as f,rB as O,rC as $,rD as L,v6 as x,rE as I,va as b,a0 as A,bK as M,dc as N,gS as D,fc as J,r as U,v as j,W as d,mA as K,vd as V,hJ as E}from"./index-cb639cc1.js";import{g as P}from"./persistable-f9157ed8.js";import{E as R,L as h}from"./SceneService-0ed4d743.js";import{s as z,l as C,u as B,m as F}from"./I3SLayerDefinitions-bf0cf266.js";import{f as y}from"./SceneModification-cb872ed3.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./resourceExtension-51a6629e.js";import"./originUtils-1469eeaf.js";import"./I3SIndexInfo-34618750.js";import"./resourceUtils-b16438b0.js";var a;let n=a=class extends S(w.ofType(y)){constructor(e){super(e),this.url=null}clone(){return new a({url:this.url,items:this.items.map(e=>e.clone())})}toJSON(e){return this.toArray().map(o=>o.toJSON(e)).filter(o=>!!o.geometry)}static fromJSON(e,o){const s=new a;for(const p of e)s.add(y.fromJSON(p,o));return s}static async fromUrl(e,o,s){const p={url:_(e),origin:"service"},v=await T(e,{responseType:"json",signal:m(s,"signal")}),g=o.toJSON(),l=[];for(const c of v.data)l.push(y.fromJSON({...c,geometry:{...c.geometry,spatialReference:g}},p));return new a({url:e,items:l})}};i([r({type:String})],n.prototype,"url",void 0),n=a=i([f("esri.layers.support.SceneModifications")],n);const u=n;let t=class extends R(O($(L(x(I(b(E))))))){constructor(...e){super(...e),this._handles=new A,this.geometryType="mesh",this.operationalLayerType="IntegratedMeshLayer",this.type="integrated-mesh",this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.profile="mesh-pyramids",this.modifications=null,this._modificationsSource=null,this.elevationInfo=null,this.path=null}destroy(){this._handles.destroy()}initialize(){this._handles.add(M(()=>this.modifications,"after-changes",()=>this.modifications=this.modifications,N))}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}readModifications(e,o,s){this._modificationsSource={url:D(e,s),context:s}}async load(e){return this.addResolvingPromise(this._doLoad(e)),this}async _doLoad(e){const o=m(e,"signal");try{await this.loadFromPortal({supportedTypes:["Scene Service"]},e)}catch(s){J(s)}if(await this._fetchService(o),U(this._modificationsSource)){const s=await u.fromUrl(this._modificationsSource.url,this.spatialReference,e);this.setAtOrigin("modifications",s,this._modificationsSource.context.origin),this._modificationsSource=null}await this._fetchIndexAndUpdateExtent(this.nodePages,o)}beforeSave(){if(!j(this._modificationsSource))return this.load().then(()=>{},()=>{})}async saveAs(e,o){return this._debouncedSaveOperations(h.SAVE_AS,{...o,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"},e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"};return this._debouncedSaveOperations(h.SAVE,e)}validateLayer(e){if(e.layerType&&e.layerType!=="IntegratedMesh")throw new d("integrated-mesh-layer:layer-type-not-supported","IntegratedMeshLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new d("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new d("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"})}_getTypeKeywords(){return["IntegratedMeshLayer"]}};i([r({type:String,readOnly:!0})],t.prototype,"geometryType",void 0),i([r({type:["show","hide"]})],t.prototype,"listMode",void 0),i([r({type:["IntegratedMeshLayer"]})],t.prototype,"operationalLayerType",void 0),i([r({json:{read:!1},readOnly:!0})],t.prototype,"type",void 0),i([r({type:z,readOnly:!0})],t.prototype,"nodePages",void 0),i([r({type:[C],readOnly:!0})],t.prototype,"materialDefinitions",void 0),i([r({type:[B],readOnly:!0})],t.prototype,"textureSetDefinitions",void 0),i([r({type:[F],readOnly:!0})],t.prototype,"geometryDefinitions",void 0),i([r({readOnly:!0})],t.prototype,"serviceUpdateTimeStamp",void 0),i([r({type:u}),P({origins:["web-scene","portal-item"],type:"resource",prefix:"modifications"})],t.prototype,"modifications",void 0),i([K(["web-scene","portal-item"],"modifications")],t.prototype,"readModifications",null),i([r(V)],t.prototype,"elevationInfo",void 0),i([r({type:String,json:{origins:{"web-scene":{read:!0,write:!0},"portal-item":{read:!0,write:!0}},read:!1}})],t.prototype,"path",void 0),t=i([f("esri.layers.IntegratedMeshLayer")],t);const te=t;export{te as default};
